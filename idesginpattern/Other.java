package idesginpattern;

/**
 * 行为型模式 11种
 * 
 */

public class Other {

}

/**
 * 策略模式 Strategy
 * 一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。
 */

/**
 * 模版方法 Template
 * 一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。
 */

/**
 * 观察者模式
 * 对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新。
 */

/**
 * 迭代模式 Iterator
 * 提供一种方法访问一个容器对象中各个元素，而又不需要暴露该对象的内部细节。
 */

/**
 * 责任链模式 Chain of Responsibility
 * 为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。
 */

/**
 * 命令模式 Command
 * 是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。
 */

/**
 * 备忘录模式 Memento
 * 在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样以后就可将该对象恢复到原来保存的状态
 * 
 * 例子 Ctrl+Z
 */

/**
 * 状态模式
 * 当一个对象在状态改变时允许其改变行为，这个对象看起来像改变了其类。
 */

/**
 * 访问者模式 Visitor
 * 封装一些作用于某种数据结构中的各种元素，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。
 * 
 * 主要将数据结构与数据操作分离。 当一个对象有很多的元素，且这些数据稳定的时候可以使用。
 */

/**
 * 中介者模式 Mediator
 * 用一个中介对象封装一系列的对象交互，中介者使各对象不需要显示的相互作用，从而使其耦合松散，而且可以独立的改变它们之间的交互。
 * 
 * MVC里 C就是M和V的中介者
 */

/**
 * 解释器模式 Interpreter
 * 这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。
 */